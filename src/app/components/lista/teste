home 
<ion-content [fullscreen]="true">
  <ion-header class="ion-no-border" [class.hidden]="headerHidden">
    <ion-toolbar class="edit-header-toolbar">
      <div class="toolbar-background"></div>
      <div class="toolbar-content">
        <ion-searchbar 
          show-clear-button="never" 
          class="custom-search" 
          placeholder="Buscar produtos..."
          (ionInput)="atualizarBusca($event)">
        </ion-searchbar>


        <app-filtros></app-filtros>
      </div>
      <app-carrossel></app-carrossel>
    </ion-toolbar>
  </ion-header>

  <app-lista [searchTerm]="searchTerm"></app-lista>
</ion-content>

<ion-footer>
  <app-navbar></app-navbar>
</ion-footer>
ts ....
  searchTerm: string = '';

  atualizarBusca(event: any) {
    this.searchTerm = event.target.value;
  }
~~
import { Component, OnInit } from '@angular/core';
import { ProdutoService } from '../../services/produto.services';
import { IonList, IonItem, IonAvatar, IonLabel } from '@ionic/angular/standalone';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';


@Component({
  selector: 'app-lista',
  templateUrl: './lista.component.html',
  styleUrls: ['./lista.component.scss'],
  standalone: true,
  imports: [IonList, IonItem, IonAvatar, IonLabel, CommonModule,],
})
export class ListaComponent implements OnInit {
  @Input() searchTerm: string = '';
  public produtos: any[] = [];
  public produtosFiltrados: any[] = [];

  constructor(
    public produtoService: ProdutoService,
    private router: Router
  ) { }

  async ngOnInit() {
    if (this.produtoService.produtos.length === 0) {
      this.produtoService.listarProdutos().subscribe({
        next: (produtos) => {
          console.log('Produtos carregados:', produtos);
          this.produtosFiltrados = produtos;
        },
        error: (erro) => {
          console.error('Erro ao carregar produtos:', erro);
        }
      });
    }
  }

  mostrarProdutos() {
    console.log('Mostrando produtos:', this.produtos);
  }

  ngOnChanges() {
    this.filtrarProdutos();
  }

  filtrarProdutos() {
    if (this.searchTerm && this.searchTerm.trim() !== '') {
      this.produtosFiltrados = this.produtos.filter((produto) =>
        produto.title.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
    } else {
      this.produtosFiltrados = [...this.produtos];
    }
  }

  // função para listar todos os produtos
  async carregarProdutos() {
    try {
      this.produtos = await this.produtoService.listarProdutos().toPromise();
      console.log('pord', this.produtos)
    } catch (error) {
      console.error('Erro ao carregar produtos:', error);
    }
  }

  // navega para a pagina de detalhes do produto com o id
  abrirDetalhesProdutos(id: number) {
    this.router.navigate(['/produto', id])
  }
}